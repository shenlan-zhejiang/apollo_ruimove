// Generated by gencpp from file carla_msgs/CarlaEgoVehicleInfoGear.msg
// DO NOT EDIT!


#ifndef CARLA_MSGS_MESSAGE_CARLAEGOVEHICLEINFOGEAR_H
#define CARLA_MSGS_MESSAGE_CARLAEGOVEHICLEINFOGEAR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace carla_msgs
{
template <class ContainerAllocator>
struct CarlaEgoVehicleInfoGear_
{
  typedef CarlaEgoVehicleInfoGear_<ContainerAllocator> Type;

  CarlaEgoVehicleInfoGear_()
    : ratio(0.0)
    , down_ratio(0.0)
    , up_ratio(0.0)  {
    }
  CarlaEgoVehicleInfoGear_(const ContainerAllocator& _alloc)
    : ratio(0.0)
    , down_ratio(0.0)
    , up_ratio(0.0)  {
  (void)_alloc;
    }



   typedef float _ratio_type;
  _ratio_type ratio;

   typedef float _down_ratio_type;
  _down_ratio_type down_ratio;

   typedef float _up_ratio_type;
  _up_ratio_type up_ratio;





  typedef boost::shared_ptr< ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator> const> ConstPtr;

}; // struct CarlaEgoVehicleInfoGear_

typedef ::carla_msgs::CarlaEgoVehicleInfoGear_<std::allocator<void> > CarlaEgoVehicleInfoGear;

typedef boost::shared_ptr< ::carla_msgs::CarlaEgoVehicleInfoGear > CarlaEgoVehicleInfoGearPtr;
typedef boost::shared_ptr< ::carla_msgs::CarlaEgoVehicleInfoGear const> CarlaEgoVehicleInfoGearConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator1> & lhs, const ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator2> & rhs)
{
  return lhs.ratio == rhs.ratio &&
    lhs.down_ratio == rhs.down_ratio &&
    lhs.up_ratio == rhs.up_ratio;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator1> & lhs, const ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace carla_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fbecdd7bc55423e61d2c6a10b88ea5b1";
  }

  static const char* value(const ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfbecdd7bc55423e6ULL;
  static const uint64_t static_value2 = 0x1d2c6a10b88ea5b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator> >
{
  static const char* value()
  {
    return "carla_msgs/CarlaEgoVehicleInfoGear";
  }

  static const char* value(const ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# The transmission ratio of the gear.\n"
"float32 ratio\n"
"\n"
"# Quotient between current RPM and MaxRPM where the autonomous gear box should shift down.\n"
"float32 down_ratio\n"
"\n"
"# Quotient between current RPM and MaxRPM where the autonomous gear box should shift up.\n"
"float32 up_ratio\n"
;
  }

  static const char* value(const ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ratio);
      stream.next(m.down_ratio);
      stream.next(m.up_ratio);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarlaEgoVehicleInfoGear_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::carla_msgs::CarlaEgoVehicleInfoGear_<ContainerAllocator>& v)
  {
    s << indent << "ratio: ";
    Printer<float>::stream(s, indent + "  ", v.ratio);
    s << indent << "down_ratio: ";
    Printer<float>::stream(s, indent + "  ", v.down_ratio);
    s << indent << "up_ratio: ";
    Printer<float>::stream(s, indent + "  ", v.up_ratio);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARLA_MSGS_MESSAGE_CARLAEGOVEHICLEINFOGEAR_H
